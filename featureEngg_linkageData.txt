
val rawblocks = sc.textFile("linkage");

val head = rawblocks.take(10)
head.foreach(println)
val line = head(5)

def isHeader(line:String): Boolean={
     line.contains("id_1")
     };

val noheader = rawblock.filter(x => !isHeader(x));

def toDouble(s:String) = {
    if ("?".equals(s)) Double.NaN else s.toDouble
    };
    
case class MatchData(id1:Int, id2: Int, scores: Array[Double], matched: Boolean);

def parse(line:String) = {
     val pieces=line.split(',')
     val id1=pieces(0).toInt
     val id2 = pieces(1).toInt
     val scores = pieces.slice(2,11).map(toDouble)
     val matched=pieces(11).toBoolean
     MatchData(id1, id2, scores, matched)
     };
     
val md = parse(line);

val mds = head.filter(x => !isHeader(x)).map(x => parse(x));

val parsed = noheader.map(line => parse(line));

parsed.cache();

val grouped = mds.groupBy(md => md.matched);

grouped.mapValues(x => x.size).foreach(println);

val matchCounts = parsed.map(md => md.matched).countByValue();
val matchCountsSeq = matchCounts.toSeq;  #ArrayBuffer((true,20931), (false,5728201))

import org.apache.spark.util.StatCounter

class NAStatCounter extends Serializable {
  val stats: StatCounter = new StatCounter()
  var missing: Long = 0
  def add(x: Double): NAStatCounter = {
    if (x.isNaN) {
      missing += 1
    } else {
      stats.merge(x)
    }
    this
  }
  def merge(other: NAStatCounter): NAStatCounter = {
    stats.merge(other.stats)
    missing += other.missing
    this
  }
  override def toString: String = {
    "stats: " + stats.toString + " NaN: " + missing
  }
}
object NAStatCounter extends Serializable {
  def apply(x: Double) = new NAStatCounter().add(x)
}


import org.apache.spark.rdd.RDD;
def statsWithMissing(rdd: RDD[Array[Double]]): Array[NAStatCounter] = {
      val nastats = rdd.mapPartitions((iter: Iterator[Array[Double]]) => {
      val nas: Array[NAStatCounter] = iter.next().map(d => NAStatCounter(d))
      iter.foreach(arr => {
        nas.zip(arr).foreach { case (n, d) => n.add(d) }
      })
      Iterator(nas)
    })
    nastats.reduce((n1, n2) => {
      n1.zip(n2).map { case (a, b) => a.merge(b) }
    })
};


val statsm = statsWithMissing(parsed.filter(_.matched).map(_.scores));
val statsn = statsWithMissing(parsed.filter(!_.matched).map(_.scores));
  
statsm.zip(statsn).map { case(m, n) =>
      (m.missing + n.missing, m.stats.mean - n.stats.mean)
    }.foreach(println);

def naz(d: Double) = if (Double.NaN.equals(d)) 0.0 else d;

case class Scored(md: MatchData, score: Double);

val ct = parsed.map(md => {
      val score = Array(2, 5, 6, 7, 8).map(i => naz(md.scores(i))).sum
      Scored(md, score)
    });

ct.filter(s => s.score >= 4.0).map(s => s.md.matched).countByValue().foreach(println);
#False Positive=637	True Positive=20871
ct.filter(s => s.score < 4.0).map(s => s.md.matched).countByValue().foreach(println)
#False Positive=5727564	True Positive=60